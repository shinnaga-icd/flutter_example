// Autogenerated from Pigeon (v9.0.7), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.shinnaga.pigeon;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class ParamApi {
  @NonNull
  private static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    errorList.add(exception.toString());
    errorList.add(exception.getClass().getSimpleName());
    errorList.add(
      "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorList;
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class Param {
    private @Nullable String str;

    public @Nullable String getStr() {
      return str;
    }

    public void setStr(@Nullable String setterArg) {
      this.str = setterArg;
    }

    private @Nullable Long num;

    public @Nullable Long getNum() {
      return num;
    }

    public void setNum(@Nullable Long setterArg) {
      this.num = setterArg;
    }

    private @Nullable ParamColor color;

    public @Nullable ParamColor getColor() {
      return color;
    }

    public void setColor(@Nullable ParamColor setterArg) {
      this.color = setterArg;
    }

    private @Nullable String image;

    public @Nullable String getImage() {
      return image;
    }

    public void setImage(@Nullable String setterArg) {
      this.image = setterArg;
    }

    public static final class Builder {

      private @Nullable String str;

      public @NonNull Builder setStr(@Nullable String setterArg) {
        this.str = setterArg;
        return this;
      }

      private @Nullable Long num;

      public @NonNull Builder setNum(@Nullable Long setterArg) {
        this.num = setterArg;
        return this;
      }

      private @Nullable ParamColor color;

      public @NonNull Builder setColor(@Nullable ParamColor setterArg) {
        this.color = setterArg;
        return this;
      }

      private @Nullable String image;

      public @NonNull Builder setImage(@Nullable String setterArg) {
        this.image = setterArg;
        return this;
      }

      public @NonNull Param build() {
        Param pigeonReturn = new Param();
        pigeonReturn.setStr(str);
        pigeonReturn.setNum(num);
        pigeonReturn.setColor(color);
        pigeonReturn.setImage(image);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(str);
      toListResult.add(num);
      toListResult.add((color == null) ? null : color.toList());
      toListResult.add(image);
      return toListResult;
    }

    static @NonNull Param fromList(@NonNull ArrayList<Object> list) {
      Param pigeonResult = new Param();
      Object str = list.get(0);
      pigeonResult.setStr((String) str);
      Object num = list.get(1);
      pigeonResult.setNum((num == null) ? null : ((num instanceof Integer) ? (Integer) num : (Long) num));
      Object color = list.get(2);
      pigeonResult.setColor((color == null) ? null : ParamColor.fromList((ArrayList<Object>) color));
      Object image = list.get(3);
      pigeonResult.setImage((String) image);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ParamColor {
    private @Nullable Long a;

    public @Nullable Long getA() {
      return a;
    }

    public void setA(@Nullable Long setterArg) {
      this.a = setterArg;
    }

    private @Nullable Long r;

    public @Nullable Long getR() {
      return r;
    }

    public void setR(@Nullable Long setterArg) {
      this.r = setterArg;
    }

    private @Nullable Long g;

    public @Nullable Long getG() {
      return g;
    }

    public void setG(@Nullable Long setterArg) {
      this.g = setterArg;
    }

    private @Nullable Long b;

    public @Nullable Long getB() {
      return b;
    }

    public void setB(@Nullable Long setterArg) {
      this.b = setterArg;
    }

    public static final class Builder {

      private @Nullable Long a;

      public @NonNull Builder setA(@Nullable Long setterArg) {
        this.a = setterArg;
        return this;
      }

      private @Nullable Long r;

      public @NonNull Builder setR(@Nullable Long setterArg) {
        this.r = setterArg;
        return this;
      }

      private @Nullable Long g;

      public @NonNull Builder setG(@Nullable Long setterArg) {
        this.g = setterArg;
        return this;
      }

      private @Nullable Long b;

      public @NonNull Builder setB(@Nullable Long setterArg) {
        this.b = setterArg;
        return this;
      }

      public @NonNull ParamColor build() {
        ParamColor pigeonReturn = new ParamColor();
        pigeonReturn.setA(a);
        pigeonReturn.setR(r);
        pigeonReturn.setG(g);
        pigeonReturn.setB(b);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(a);
      toListResult.add(r);
      toListResult.add(g);
      toListResult.add(b);
      return toListResult;
    }

    static @NonNull ParamColor fromList(@NonNull ArrayList<Object> list) {
      ParamColor pigeonResult = new ParamColor();
      Object a = list.get(0);
      pigeonResult.setA((a == null) ? null : ((a instanceof Integer) ? (Integer) a : (Long) a));
      Object r = list.get(1);
      pigeonResult.setR((r == null) ? null : ((r instanceof Integer) ? (Integer) r : (Long) r));
      Object g = list.get(2);
      pigeonResult.setG((g == null) ? null : ((g instanceof Integer) ? (Integer) g : (Long) g));
      Object b = list.get(3);
      pigeonResult.setB((b == null) ? null : ((b instanceof Integer) ? (Integer) b : (Long) b));
      return pigeonResult;
    }
  }

  private static class FlutterParamApiCodec extends StandardMessageCodec {
    public static final FlutterParamApiCodec INSTANCE = new FlutterParamApiCodec();

    private FlutterParamApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return Param.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return ParamColor.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof Param) {
        stream.write(128);
        writeValue(stream, ((Param) value).toList());
      } else if (value instanceof ParamColor) {
        stream.write(129);
        writeValue(stream, ((ParamColor) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class FlutterParamApi {
    private final BinaryMessenger binaryMessenger;

    public FlutterParamApi(BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    /** Public interface for sending reply. */     public interface Reply<T> {
      void reply(T reply);
    }
    /** The codec used by FlutterParamApi. */
    static MessageCodec<Object> getCodec() {
      return FlutterParamApiCodec.INSTANCE;
    }
    public void setParams(@NonNull Param paramArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.FlutterParamApi.setParams", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(paramArg)),
          channelReply -> callback.reply(null));
    }
  }
}
