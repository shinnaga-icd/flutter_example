// Autogenerated from Pigeon (v9.1.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

class Param {
  Param({
    this.str,
    this.num,
    this.color,
    this.image,
    this.listStr,
  });

  String? str;

  int? num;

  ParamColor? color;

  String? image;

  List<String?>? listStr;

  Object encode() {
    return <Object?>[
      str,
      num,
      color?.encode(),
      image,
      listStr,
    ];
  }

  static Param decode(Object result) {
    result as List<Object?>;
    return Param(
      str: result[0] as String?,
      num: result[1] as int?,
      color: result[2] != null
          ? ParamColor.decode(result[2]! as List<Object?>)
          : null,
      image: result[3] as String?,
      listStr: (result[4] as List<Object?>?)?.cast<String?>(),
    );
  }
}

class ParamColor {
  ParamColor({
    this.a,
    this.r,
    this.g,
    this.b,
  });

  int? a;

  int? r;

  int? g;

  int? b;

  Object encode() {
    return <Object?>[
      a,
      r,
      g,
      b,
    ];
  }

  static ParamColor decode(Object result) {
    result as List<Object?>;
    return ParamColor(
      a: result[0] as int?,
      r: result[1] as int?,
      g: result[2] as int?,
      b: result[3] as int?,
    );
  }
}

class _FlutterParamApiCodec extends StandardMessageCodec {
  const _FlutterParamApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is Param) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is ParamColor) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return Param.decode(readValue(buffer)!);
      case 129:
        return ParamColor.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class FlutterParamApi {
  static const MessageCodec<Object?> codec = _FlutterParamApiCodec();

  void setParams(Param param);

  static void setup(FlutterParamApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.FlutterParamApi.setParams', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.FlutterParamApi.setParams was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final Param? arg_param = (args[0] as Param?);
          assert(arg_param != null,
              'Argument for dev.flutter.pigeon.FlutterParamApi.setParams was null, expected non-null Param.');
          api.setParams(arg_param!);
          return;
        });
      }
    }
  }
}
